##########################BRANCH

###grepping out for significance only
#make directories from the grepped lines
cd ~/Datafiles/Bats/GCF_rerun_0821/PAML_branch/selection_tests/myobra_forward
mkdir grep_lnL

#cd into the branch_site_neutral
cd branch_site_neutral
#get out the lnl for the neutral, removing the spaces and replacing with commas
for i in *neutral.txt; do
grep 'lnL' ${i} > ../grep_lnL/${i}.null.lnL;
sed -i -e 's/\s\+/,/g' ../grep_lnL/${i}.null.lnL; #change the spaces to commas
done

#cd into the branch_site
cd ../branch_site
#get out the lnl for the alt, removing the spaces and replacing with commas
for i in *site.txt; do
grep 'lnL' ${i} > ../grep_lnL/${i}.alt.lnL;
sed -i -e 's/\s\+/,/g' ../grep_lnL/${i}.alt.lnL; #change the spaces to commas
done

#first make sure there are no empty files, as the python script will break if there are.
#find empty files in the grep_table and grep_lnL directories
cd ../grep_lnL
find -type f -empty

#getting rid of ./myoMyo_rna-XM_036327705_branch_site.txt.alt.lnL ./myoMyo_rna-XM_036327705_branch_site_neutral.txt.null.lnL ./myoMyo_rna-XM_036311857_branch_site_neutral.txt.null.lnL ./myoMyo_rna-XM_036311857_branch_site.txt.alt.lnL

#get a file with all the names, so I can call all of them with different names
ls *null.lnL > ../file_names
sed -i -e 's/_branch_site_neutral.txt.null.lnL//g' ../file_names




#move back into the base file for the spp
cd ..
#create file for dictionary start file to go
touch proto_dict

#loop around the lines in the file_name file, so i is each chrom name. Creates file in a good format to create the dictionary from
for i in $(cat file_names); do
echo '["grep_lnL/'${i}'_branch_site_neutral.txt.null.lnL", "grep_lnL/'${i}'_branch_site.txt.alt.lnL"]' >> proto_dict;
done

#create base file to append onto
cat > base.csv
gene,lnLnull,lnLalt

#go into python
python
#set package
import pandas as pd

#read in file with chrom names in 
names = pd.read_csv("file_names", header=None)
#read in the created proto_dict file
proto = pd.read_csv("proto_dict", header=None, sep='\t')
#join together
df = pd.concat([names, proto], axis=1)
#name the columns
df.columns = ["name", "list"]
#change so values will be treated separately (allows the creation of the dictionary)
df['list'] = df['list'].apply(eval)
#create dictionary
dictionary = dict(zip(df.name, df.list))


base = pd.read_csv("base.csv", delimiter=',', header='infer')

for key,value in dictionary.items():
	null_file = value[0]
	lnL_null = pd.read_csv(null_file, delimiter=',', header=None)
	alt_file = value[1]
	lnL_alt = pd.read_csv(alt_file, delimiter=',', header=None)
	base = base.append({'gene':key, 'lnLnull':lnL_null.iat[0,4],'lnLalt':lnL_alt.iat[0,4]},ignore_index=True)

base["LRT"] = (2*(base["lnLalt"] - base["lnLnull"]))

base.to_csv("total_PAML_branch_LRT.csv", header=True, index=False)

#subsetting (without correction just for numbers) #THIS IS NOT THE RIGHT VALUE, IS 3.81
sig = base.loc[base["LRT"] >= 3.81] 
sig2 = base.loc[base["LRT"] <= -3.81]
sig3 = pd.concat([sig, sig2], axis=0)


lookup = pd.read_csv("~/Datafiles/Bats/GCF_rerun_0821/yn00/between_spp/lookup_genes", delimiter=' ', header=None, index_col = 0)

sig3['gene'] = sig3['gene'].astype(str) + '.1'

df = lookup.merge(sig3, left_index=True, right_on='gene') #763
df.to_csv("sig_PAML_branch_LRT.csv", header=True, index=False)
names = df.iloc[:,0]
names.to_csv("sig_names", header=False, index=False)

comm -12 <(sort sig_names) <(sort ~/Datafiles/Bats/GCF_rerun_0821/PAML_pub59/selection_tests/comparison/myobra_uniq_gene_symbols) | wc -l
cd ~/Datafiles/Bats/GCF_rerun_0821/PAML_pub59/selection_tests/comparison/myobra_uniq_gene_symbols





####################
#getting out the branch values out for this
grep 'kappa (ts/tv) ='
grep 'w (dN/dS) for branches:'

####
#grep out the omega estimates and kappa values for the whole tree

#cd to the correct file
cd ~/Datafiles/Bats/GCF_rerun_0821/PAML_omega_estimate/selection_tests/myobra_forward

#create directory for files to go into
mkdir grep_omega
mkdir grep_kappa

#move into the branch_site directory
cd branch_site

#start the grep loop to get out the details
for i in *.txt; do
grep 'kappa (ts/tv) =' ${i} > ${i}.kappa1; #grep out kappa line
sed -i -e 's/ //g' ${i}.kappa1; #sed line removes the spaces in a temp file
cat ${i}.kappa1 | cut -d= -f2 > ../grep_kappa/${i}.kappa; #cut line divides the phrase by the space delimiter, and choses the second half of the phrase, and saves to final file
rm ${i}.kappa1; #then removes the temp file
grep 'w (dN/dS) for branches:' ${i} > ${i}.omega1; # grep out omega line
cat ${i}.omega1 | cut -d: -f2 > ${i}.omega2; #cut line divides the phrase by the space delimiter, and choses the second half of the phrase, and saves to second temp file
sed -e 's/\s\+/,/g' ${i}.omega2 > ../grep_omega/${i}.omega # convert blank spaces to commas
rm ${i}.omega1 ${i}.omega2; # remove both temporary files
done

#first make sure there are no empty files, as the python script will break if there are.
#find empty files in the grep_table and grep_lnL directories
cd ../grep_omega
find -type f -empty

#getting rid of ./myoMyo_rna-XM_036327705_ ./myoMyo_rna-XM_036327705 ./myoMyo_rna-XM_036311857

#create new base csv
cat > base2.csv
gene,branch_tree_omega,branch_mb_omega,branch_kappa

#create file for dictionary start file to go
touch proto_dict2

#loop around the lines in the file_name file, so i is each chrom name. Creates file in a good format to create the dictionary from
for i in $(cat file_names); do
echo '["grep_omega/'${i}'_branch_site.txt.omega", "grep_kappa/'${i}'_branch_site.txt.kappa"]' >> proto_dict2;
done

#go into python
python
#set package
import pandas as pd

#read in file with chrom names in 
names = pd.read_csv("file_names", header=None)
#read in the created proto_dict file
proto = pd.read_csv("proto_dict2", header=None, sep='\t')
#join together
df = pd.concat([names, proto], axis=1)
#name the columns
df.columns = ["name", "list"]
#change so values will be treated separately (allows the creation of the dictionary)
df['list'] = df['list'].apply(eval)
#create dictionary
dictionary = dict(zip(df.name, df.list))


base = pd.read_csv("base2.csv", delimiter=',', header='infer')

for key,value in dictionary.items():
	omega_file = value[0]
	omega = pd.read_csv(omega_file, delimiter=',', header=None)
	kappa_file = value[1]
	kappa = pd.read_csv(kappa_file, delimiter=',', header=None)
	base = base.append({'gene':key, 'branch_tree_omega':omega.iat[0,1],'branch_mb_omega':omega.iat[0,2], 'branch_kappa':kappa.iat[0,0]},ignore_index=True)

df2 = pd.read_csv("total_PAML_branch_LRT.csv", header='infer', index_col=0)

total = pd.merge(base, df2, left_on='gene', right_index=True)

total = total.rename(columns={'lnLnull':'branch_lnLnull', 'lnLalt':'branch_lnLalt', 'LRT':'branch_LRT'})

#first need to modify the gene names so they match properly everything else (adding .1 onto the ends)
total['gene'] = total['gene'].astype(str) + ".1"

#write-over the branch file
total.to_csv("total_PAML_branch_LRT.csv", header=True, index=False)








########################################################################################BRANCH_SITE
#grep the PAML  - testing small set

#data in PAML output looks like this (branch-site)
site class             0        1       2a       2b
proportion       0.60140  0.24258  0.11118  0.04484
background w     0.08067  1.00000  0.08067  1.00000
foreground w     0.08067  1.00000 581.32600 581.32600

#copying the output files
cp ~/Datafiles/Bats/GCF_rerun_0821/PAML_pub59/selection_tests/myobra_forward/branch_site/myoMyo_rna-XM_036295537_branch_site.txt .
cp ~/Datafiles/Bats/GCF_rerun_0821/PAML_pub59/selection_tests/myobra_forward/branch_site_neutral/myoMyo_rna-XM_036295537_branch_site_neutral.txt .

cp ~/Datafiles/Bats/GCF_rerun_0821/PAML_pub59/selection_tests/myobra_forward/branch_site/myoMyo_rna-XM_036295558_branch_site.txt .
cp ~/Datafiles/Bats/GCF_rerun_0821/PAML_pub59/selection_tests/myobra_forward/branch_site_neutral/myoMyo_rna-XM_036295558_branch_site_neutral.txt .


grep 'lnL' myoMyo_rna-XM_036295537_branch_site.txt
grep 'lnL' myoMyo_rna-XM_036295537_branch_site_neutral.txt

#get out the lnl for both the neutral and the alt
for i in *.txt; do
grep 'lnL' ${i} > ${i}.lnL;
sed -i -e 's/\s\+/,/g' ${i}.lnL; #change the spaces to commas
done

for i in *site.txt; do
grep 'proportion' ${i} > ${i}.table;
grep 'background w' ${i} >> ${i}.table;
grep 'foreground w' ${i} >> ${i}.table;
sed -i 's/d w/d/g' ${i}.table; #remove the ' w' from the file, as this messes up the number of cols
sed -i -e 's/\s\+/,/g' ${i}.table; #change the spaces to commas
done


cat > base.csv
gene,proportion0,proportion1,proportion2a,proportion2b,backgroundw0,backgroundw1,backgroundw2a,backgroundw2b,foregroundw0,foregroundw1,foregroundw2a,foregroundw2b,lnLnull,lnLalt


python
import numpy as np
import pandas as pd

base = pd.read_csv("base.csv", delimiter=',', header='infer')

table = pd.read_csv("myoMyo_rna-XM_036295537_branch_site.txt.table", delimiter=',', header=None)
lnL_alt = pd.read_csv("myoMyo_rna-XM_036295537_branch_site.txt.lnL", delimiter=',', header=None)
lnL_null = pd.read_csv("myoMyo_rna-XM_036295537_branch_site_neutral.txt.lnL", delimiter=',', header=None)


df.iat[0,1]

lnL_alt.iat[0,4]
lnL_null.iat[0,4]

base = base.append({'gene':"file", 'proportion0':table.iat[0,1], 'proportion1':table.iat[0,2],'proportion2a':table.iat[0,3],'proportion2b':table.iat[0,4],'backgroundw0':table.iat[1,1],'backgroundw1':table.iat[1,2],'backgroundw2a':table.iat[1,3],'backgroundw2b':table.iat[1,4],'foregroundw0':table.iat[2,1],'foregroundw1':table.iat[2,2],'foregroundw2a':table.iat[2,3],'foregroundw2b':table.iat[2,4],'lnLnull':lnL_null.iat[0,4],'lnLalt':lnL_alt.iat[0,4]},ignore_index=True)




########################## creating a loverly loop
#make directories from the grepped lines
mkdir grep_table
mkdir grep_lnL

#cd into the branch_site_neutral
cd branch_site_neutral
#get out the lnl for the neutral, removing the spaces and replacing with commas
for i in *neutral.txt; do
grep 'lnL' ${i} > ../grep_lnL/${i}.null.lnL;
sed -i -e 's/\s\+/,/g' ../grep_lnL/${i}.null.lnL; #change the spaces to commas
done

#cd into the branch_site
cd ../branch_site
#get out the lnl for the alt, removing the spaces and replacing with commas
#get out the MLE data from the alt too
for i in *site.txt; do
grep 'lnL' ${i} > ../grep_lnL/${i}.alt.lnL;
sed -i -e 's/\s\+/,/g' ../grep_lnL/${i}.alt.lnL; #change the spaces to commas
grep 'proportion' ${i} > ../grep_table/${i}.table;
grep 'background w' ${i} >> ../grep_table/${i}.table;
grep 'foreground w' ${i} >> ../grep_table/${i}.table;
sed -i 's/d w/d/g' ../grep_table/${i}.table; #remove the ' w' from the file, as this messes up the number of cols
sed -i -e 's/\s\+/,/g' ../grep_table/${i}.table; #change the spaces to commas
done


#first make sure there are no empty files, as the python script will break if there are. #should change this so it doesn't, but haven't yet
#find empty files in the grep_table and grep_lnL directories
find -type f -empty
#I had to remove myoMyo_rna-XM_036327705_* myoMyo_rna-XM_036311857_* for both myobra and myoluc


#get a file with all the names, so I can call all of them with different names
cd ../grep_table
ls *site.txt.table > ../file_names
sed -i -e 's/_branch_site.txt.table//g' ../file_names

#move back into the base file for the spp
cd ..
#create file for dictionary start file to go
touch proto_dict

#loop around the lines in the file_name file, so i is each chrom name. Creates file in a good format to create the dictionary from
for i in $(cat file_names); do
echo '["grep_lnL/'${i}'_branch_site_neutral.txt.null.lnL", "grep_lnL/'${i}'_branch_site.txt.alt.lnL", "grep_table/'${i}'_branch_site.txt.table"]' >> proto_dict;
done

#create base file to append onto
cat > base.csv
gene,proportion0,proportion1,proportion2a,proportion2b,backgroundw0,backgroundw1,backgroundw2a,backgroundw2b,foregroundw0,foregroundw1,foregroundw2a,foregroundw2b,lnLnull,lnLalt

#go into python
python
#set package
import pandas as pd

#read in file with chrom names in 
names = pd.read_csv("file_names", header=None)
#read in the created proto_dict file
proto = pd.read_csv("proto_dict", header=None, sep='\t')
#join together
df = pd.concat([names, proto], axis=1)
#name the columns
df.columns = ["name", "list"]
#change so values will be treated separately (allows the creation of the dictionary)
df['list'] = df['list'].apply(eval)
#create dictionary
dictionary = dict(zip(df.name, df.list))

base = pd.read_csv("base.csv", delimiter=',', header='infer')

for key,value in dictionary.items():
	null_file = value[0]
	lnL_null = pd.read_csv(null_file, delimiter=',', header=None)
	alt_file = value[1]
	lnL_alt = pd.read_csv(alt_file, delimiter=',', header=None)
	table_file = value[2]
	table = pd.read_csv(table_file, delimiter=',', header=None)
	base = base.append({'gene':key, 'proportion0':table.iat[0,1], 'proportion1':table.iat[0,2],'proportion2a':table.iat[0,3],'proportion2b':table.iat[0,4],'backgroundw0':table.iat[1,1],'backgroundw1':table.iat[1,2],'backgroundw2a':table.iat[1,3],'backgroundw2b':table.iat[1,4],'foregroundw0':table.iat[2,1],'foregroundw1':table.iat[2,2],'foregroundw2a':table.iat[2,3],'foregroundw2b':table.iat[2,4],'lnLnull':lnL_null.iat[0,4],'lnLalt':lnL_alt.iat[0,4]},ignore_index=True)

base.to_csv("total_PAML_outputs.csv", header=True, index=False)

###########

#getting the likelihood ratio test from the log likelihood values (2x (lnLalt - lnLnull))
df = pd.read_csv("total_PAML_outputs.csv", header='infer')
df["LRT"] = (2*(df["lnLalt"] - df["lnLnull"]))

#subsetting (without correction just for numbers) #THIS IS NOT THE RIGHT VALUE, IS 3.81
df.loc[df["LRT"] >= 3.81] #1451 genes show as significant out of 6775 for myobra (1169 for myoluc)

#filtering out only the genes were both the mb and ml sequences begin with M-starts


#want to subset to only include the m-starts?
#read in gene_filter, with gene numbers as index
gene_filter = pd.read_csv("~/Datafiles/Bats/GCF_rerun_0821/pairwise_align/nuc_align/nuc_seq/right_startcodon_genes.csv", header='infer', index_col='gene')

#first need to modify the gene names so they match properly everything else (adding .1 onto the ends)
df['gene'] = df['gene'].astype(str) + ".1"

#merge the gene_filter by index with the gene column in the df
df2 = gene_filter.merge(df, left_index=True, right_on='gene')

#drop the mb and ml columns
df2.drop(['mb', 'ml'], axis=1, inplace=True)

#write out the csv 
df2.to_csv("Mstart_total_PAML_outputs.csv", header=True, index=False)



##########
#use R to get the p values and the adjusted p values, and port back as total_PAML_outputs_adjustedP.csv
